pipeline:
  name: HTML-Deployment-Pipeline
  identifier: HTMLDeploymentPipeline
  projectIdentifier: default_project
  orgIdentifier: default
  description: Pipeline to demonstrate deployment of simple html page to AWS
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: HTML
        build: <+input>
  stages:
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
          buildIntelligence:
            enabled: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Build_and_Push_Image
                  identifier: Build_and_Push_Image
                  spec:
                    shell: Sh
                    command: |-
                      set -e
                      export IMAGE_NAME=my-html-app 
                      docker build -t $IMAGE_NAME . 
                      IMAGE_ID=$(docker images -q $IMAGE_NAME:latest)
                      echo "IMAGE_ID: $IMAGE_ID"
                      JFROG_USERNAME=<+secrets.getValue("jFrog")>
                      JFROG_PASSWORD=<+secrets.getValue("jfrogPass")>
                      ARTIFACTORY_TOKEN=<+secrets.getValue("ARTIFACTORY_TOKEN")>
                      echo "$ARTIFACTORY_TOKEN" | docker login trialvj.jfrog.io --username vjdevops@hotmail.com --password-stdin
                      docker tag $IMAGE_NAME trialvj.jfrog.io/docker-html-local/my-html-app:latest
                      docker push trialvj.jfrog.io/docker-html-local/my-html-app:latest
                  description: Build and push docker image to jFrog Artifactory
              - step:
                  type: Run
                  name: Build_Docker_Image
                  identifier: Build_Docker_Image
                  spec:
                    shell: Sh
                    command: |-
                      #set -e 
                      # Build Docker image and retrieve IMAGE_ID 
                      #docker build -t my-html-app . 
                      #IMAGE_ID=$(docker images -q my-html-app:latest) 
                      #echo "IMAGE_ID: $IMAGE_ID" echo "export IMAGE_ID=$IMAGE_ID" >> ~/.bashrc

                      set -e 
                      # Build Docker image and retrieve IMAGE_ID 
                      docker build -t my-html-app . 
                      IMAGE_ID=$(docker images -q my-html-app:latest) 
                      echo "IMAGE_ID=$IMAGE_ID" > image-id.txt 
                      # Ensure IMAGE_ID is set 
                      if [ -z "$IMAGE_ID" ]; then 
                      echo "Error: IMAGE_ID is not set or is empty." 
                      exit 1 
                      fi 
                      echo "IMAGE_ID:$IMAGE_ID"
                  description: step to build docker image
              - step:
                  type: Run
                  name: List Docker Images
                  identifier: List_Docker_Images
                  spec:
                    shell: Sh
                    command: docker images
              - step:
                  type: Run
                  name: Store_IMAGE_ID
                  identifier: Store_IMAGE_ID
                  spec:
                    shell: Sh
                    command: |-
                      set -e
                      # Export the IMAGE_ID from the previous step
                      export IMAGE_ID=$(cat image-id.txt | grep IMAGE_ID | cut -d'=' -f2)
                      echo "export IMAGE_ID=$IMAGE_ID" >> ~/.bashrc
              - step:
                  type: Run
                  name: PushToArtifactory
                  identifier: PushToArtifactory
                  spec:
                    shell: Sh
                    command: |-
                      # Debug: Print the IMAGE_ID (ensure it's set correctly)
                      echo "IMAGE_ID:$IMAGE_ID"

                      # Retrieve secrets from Harness 
                      JFROG_USERNAME=<+secrets.getValue("jFrog")> 
                      JFROG_PASSWORD=<+secrets.getValue("jfrogPass")>
                      ARTIFACTORY_TOKEN=<+secrets.getValue("ARTIFACTORY_TOKEN")>
                      echo $ARTIFACTORY_TOKEN | docker login trialvj.jfrog.io --username vjdevops@hotmail.com --password-stdin

                      # Ensure IMAGE_ID is set correctly
                      IMAGE_ID=$(cat image-id.txt | grep IMAGE_ID | cut -d'=' -f2 | tr -d '[:space:]')  # Remove whitespace
                      echo "IMAGE_ID:$IMAGE_ID"

                      # Check if IMAGE_ID is set and not empty
                      if [ -z "$IMAGE_ID" ]; then
                        echo "Error: IMAGE_ID is not set or is empty."
                        exit 1
                      fi

                      # Verify image existence
                      if ! docker images | grep -q "my-html-app:$IMAGE_ID"; then
                        echo "Error: Image 'my-html-app:$IMAGE_ID' not found. Check build process."
                        exit 1
                      fi

                      # Login to JFrog using access token (avoid storing password)
                      echo "$ARTIFACTORY_TOKEN" | docker login trialvj.jfrog.io --username vjdevops@hotmail.com --password-stdin

                      docker tag "my-html-app:$IMAGE_ID" trialvj.jfrog.io/docker-html-local/my-html-app:latest
                      docker push trialvj.jfrog.io/docker-html-local/my-html-app:latest
                  description: push built docker image to artifactory
